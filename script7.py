import os
import asyncio
from difflib import SequenceMatcher
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import lyricsgenius
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7941650366:AAEo6GsSZ_Hf9rrVllPywyMVY1Bq59OQDc0"  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
GENIUS_API_KEY = 'CaRmec5MDGN8v87xC0fGf-TfE7QxvihGK8-UuC1phjkbuCqHQCdd--0lemesGbFp'
MAX_RETRIES = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Genius API
try:
    genius = lyricsgenius.Genius(
        GENIUS_API_KEY,
        verbose=False,
        remove_section_headers=True,
        skip_non_songs=True,
        timeout=30,
        retries=3
    )
except Exception as e:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Genius: {e}")
    genius = None

def normalize_text(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É"""
    text = re.sub(r'[^\w\s]', '', text)
    return text.lower().strip()

def similar(a: str, b: str) -> float:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫ –æ—Ç 0 –¥–æ 1"""
    return SequenceMatcher(None, normalize_text(a), normalize_text(b)).ratio()

async def find_exact_match(artist: str, title: str, attempts=3) -> dict:
    """–ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞"""
    for attempt in range(attempts):
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å
            search_query = f"{normalize_text(artist)} {normalize_text(title)}"
            search_results = genius.search_songs(search_query)
            
            if not search_results or not search_results.get('hits'):
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {search_query}")
                return None

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ù–∞–π–¥–µ–Ω–æ {len(search_results['hits'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {search_query}")

            # –ò—â–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            best_match = None
            best_score = 0.5  # –°–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

            for hit in search_results['hits']:
                result = hit['result']
                current_artist = result['primary_artist']['name']
                current_title = result['title']
                
                # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                score = (similar(artist, current_artist) * 0.6 + 
                         similar(title, current_title) * 0.4)
                
                print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º: {current_artist} - {current_title} (score: {score:.2f})")
                
                if score > best_score:
                    best_score = score
                    best_match = result

            if best_match:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Å–Ω—é
                full_song = genius.search_song(
                    title=best_match['title'],
                    artist=best_match['primary_artist']['name']
                )
                if full_song and full_song.lyrics:
                    return {
                        'id': best_match['id'],
                        'title': best_match['title'],
                        'artist': best_match['primary_artist']['name'],
                        'url': best_match['url'],
                        'lyrics': full_song.lyrics
                    }
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è {best_match['title']} - {best_match['primary_artist']['name']}")

        except Exception as e:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt == attempts - 1:
                return None
            await asyncio.sleep(1)
    
    return None

@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("""
<b>üéµ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω üéµ</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏</code>

–ü—Ä–∏–º–µ—Ä—ã:
<code>–ì—Ä–∏–±—ã - –¢–∞–µ—Ç –ª—ë–¥</code>
<code>–ö–∏–Ω–æ - –ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏</code>

–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
""")

@dp.message(F.text)
async def handle_search(message: types.Message):
    if not genius:
        await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è!")
        return

    try:
        if '-' not in message.text:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ</code>")
            return

        artist, title = map(str.strip, message.text.split('-', 1))
        if not artist or not title:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ!")
            return

        search_msg = await message.answer(f"üîç –ò—â–µ–º <b>{title}</b> ‚Äî <b>{artist}</b>...")

        # –ü–æ–∏—Å–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        song_data = None
        for attempt in range(MAX_RETRIES):
            song_data = await find_exact_match(artist, title)
            if song_data:
                break
            await asyncio.sleep(1)

        if not song_data:
            await search_msg.edit_text(f"""
‚ùå –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: <b>{artist} - {title}</b>

–°–æ–≤–µ—Ç—ã:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
3. –£–ø—Ä–æ—Å—Ç–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
""")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        lyrics = song_data['lyrics']
        if len(lyrics) > 4000:
            lyrics = lyrics[:4000] + "\n\n[...—Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω...]"

        response = f"""
üé§ <b>{song_data['artist']}</b>
üéµ <b>{song_data['title']}</b>

{lyrics}

<i>–ò—Å—Ç–æ—á–Ω–∏–∫: Genius.com ‚Ä¢ ID: {song_data['id']}</i>
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"info_{song_data['id']}"),
                InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Genius", url=song_data['url'])
            ]
        ])

        await search_msg.edit_text(response, reply_markup=keyboard)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data.startswith("info_"))
async def show_song_info(callback: types.CallbackQuery):
    try:
        song_id = callback.data.split("_")[1]
        song_info = genius.song(song_id)['song']

        info_text = f"""
üìå <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

üé§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {song_info['primary_artist']['name']}
üéµ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {song_info['title']}
üìÄ <b>–ê–ª—å–±–æ–º:</b> {song_info.get('album', {}).get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üìÖ <b>–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:</b> {song_info.get('release_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}
üëÄ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {song_info.get('stats', {}).get('pageviews', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

üîó <a href="{song_info['url']}">–°—Å—ã–ª–∫–∞ –Ω–∞ Genius</a>
"""
        await callback.message.answer(info_text)
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
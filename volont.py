import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, any_state, default_state
import logging
import os
from dotenv import load_dotenv
from db import create_db
from data import load_volunteer_data, load_user_ids, save_user_ids
import aiosqlite
from aiogram.filters import Command, StateFilter

load_dotenv()

TOKEN = os.getenv('BOT_TOKEN') or '7651729532:AAG4AdLaMYQZbdW1WWjr2nVULRKmdsTsalo'
ADMIN_ID = int(os.getenv('ADMIN_ID', '6356238822'))

volunteer_data = load_volunteer_data()
user_ids = load_user_ids()

main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìñ–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ")],
        [KeyboardButton(text="ü§ù–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ"), KeyboardButton(text="üÜò–í—ã–±–æ—Ä –ø–æ–º–æ—â–∏")],
        [KeyboardButton(text="–°–∞–π—Ç dobro.ru"), KeyboardButton(text="–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –º—ã?")],
        [KeyboardButton(text="üõ†–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ],
    resize_keyboard=True
)

# --- FSM –¥–ª—è –ø–æ–º–æ—â–∏ ---
class HelpStates(StatesGroup):
    city = State()
    page = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def main_menu_handler(message: Message, state: FSMContext):
    text = message.text
    if text == "üìñ–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://vk.com/@proectva-volonterstvo-polnoe-rukovodstvo")]
            ]
        )
        await message.answer(
            "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –æ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–µ:",
            reply_markup=kb
        )
    elif text == "üõ†–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/help_Emy_off_bot")]
            ]
        )
        await message.answer(
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:",
            reply_markup=kb
        )
    elif text == "ü§ù–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ":
        cities = [
            [KeyboardButton(text=city)] for city in volunteer_data['volunteer_entry'].keys()
        ] + [[KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]]
        await message.answer("üåç–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è", reply_markup=ReplyKeyboardMarkup(keyboard=cities, resize_keyboard=True))
        await state.set_state("entry_city")
    elif text == "üÜò–í—ã–±–æ—Ä –ø–æ–º–æ—â–∏":
        cities = [
            [KeyboardButton(text=city)] for city in volunteer_data['help_data'].keys()
        ] + [[KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]]
        await message.answer("üåç–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏", reply_markup=ReplyKeyboardMarkup(keyboard=cities, resize_keyboard=True))
        await state.set_state(HelpStates.city)
    elif text == "–°–∞–π—Ç dobro.ru":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–í—Ö–æ–¥", url="https://dobro.ru/login?__target_path=/dashboard"),
                    InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url="https://dobro.ru/register?__target_path=%2Fdashboard")
                ]
            ]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    elif text == "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –º—ã?":
        info = volunteer_data['why_us']
        await message.answer(f"{info['title']}\n\n{info['content']}", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]], resize_keyboard=True))
    elif text == "üîô–ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu_kb)

# --- –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
async def cmd_check(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check <ID –∏–ª–∏ @username>")
        return
    identifier = args[1].replace('@', '')
    async with aiosqlite.connect('users.db') as db:
        if identifier.isdigit():
            async with db.execute('SELECT * FROM users WHERE telegram_id = ?', (int(identifier),)) as cursor:
                user = await cursor.fetchone()
        else:
            async with db.execute('SELECT * FROM users WHERE username = ?', (identifier,)) as cursor:
                user = await cursor.fetchone()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        await db.execute('UPDATE users SET is_confirmed = 1 WHERE telegram_id = ?', (user[0],))
        await db.commit()
    await message.answer(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[2]} {user[1]} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")

async def cmd_add_work(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_work <ID –∏–ª–∏ @username>")
        return
    identifier = args[1].replace('@', '')
    async with aiosqlite.connect('users.db') as db:
        if identifier.isdigit():
            async with db.execute('SELECT * FROM users WHERE telegram_id = ?', (int(identifier),)) as cursor:
                user = await cursor.fetchone()
        else:
            async with db.execute('SELECT * FROM users WHERE username = ?', (identifier,)) as cursor:
                user = await cursor.fetchone()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        await db.execute('UPDATE users SET completed_works = completed_works + 1 WHERE telegram_id = ?', (user[0],))
        await db.commit()
    await message.answer(f"–†–∞–±–æ—Ç–∞ –∑–∞—á—Ç–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[2]} {user[1]}")

async def cmd_remove_work(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_work <ID –∏–ª–∏ @username>")
        return
    identifier = args[1].replace('@', '')
    async with aiosqlite.connect('users.db') as db:
        if identifier.isdigit():
            async with db.execute('SELECT * FROM users WHERE telegram_id = ?', (int(identifier),)) as cursor:
                user = await cursor.fetchone()
        else:
            async with db.execute('SELECT * FROM users WHERE username = ?', (identifier,)) as cursor:
                user = await cursor.fetchone()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        await db.execute('UPDATE users SET completed_works = MAX(completed_works - 1, 0) WHERE telegram_id = ?', (user[0],))
        await db.commit()
    await message.answer(f"–†–∞–±–æ—Ç–∞ —É–±—Ä–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[2]} {user[1]}")

async def cmd_send_announcement(message: Message, bot: Bot):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    announcement_text = args[1]
    from data import load_user_ids, load_volunteer_data
    user_ids = load_user_ids()
    volunteer_data = load_volunteer_data()
    msg = volunteer_data['announcements']['broadcast_template'].format(message=announcement_text)
    for user_id in user_ids:
        try:
            await bot.send_message(chat_id=int(user_id), text=msg)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# --- –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–º–æ—â–∏ ---
async def help_city(message: Message, state: FSMContext):
    if message.text in volunteer_data['help_data']:
        await state.update_data(help_city=message.text, help_page=0)
        await show_help_event(message, state)
        await state.set_state(HelpStates.page)
    elif message.text == "üîô–ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏—è –ø–æ –≥–æ—Ä–æ–¥—É –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ---
async def show_help_event(message: Message, state: FSMContext):
    data = await state.get_data()
    city = data.get('help_city')
    page = data.get('help_page', 0)
    events = volunteer_data['help_data'].get(city, [])
    if not events:
        await message.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.", reply_markup=main_menu_kb)
        await state.clear()
        return
    total_pages = len(events)
    event_text = events[page]
    nav_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚óÄÔ∏è"), KeyboardButton(text="‚ñ∂Ô∏è")],
            [KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer(f"{event_text}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}", reply_markup=nav_kb)

# --- –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü ---
async def help_page_nav(message: Message, state: FSMContext):
    data = await state.get_data()
    city = data.get('help_city')
    page = data.get('help_page', 0)
    events = volunteer_data['help_data'].get(city, [])
    if not events:
        await message.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.", reply_markup=main_menu_kb)
        await state.clear()
        return
    if message.text == "‚óÄÔ∏è":
        page = (page - 1) % len(events)
    elif message.text == "‚ñ∂Ô∏è":
        page = (page + 1) % len(events)
    elif message.text == "üîô–ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
        await state.clear()
        return
    await state.update_data(help_page=page)
    await show_help_event(message, state)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 'üîô–ù–∞–∑–∞–¥' –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
async def fsm_back_handler(message: Message, state: FSMContext):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
    await state.clear()

async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=main_menu_kb)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
async def entry_city_handler(message: Message, state: FSMContext):
    if message.text in volunteer_data['volunteer_entry']:
        info = volunteer_data['volunteer_entry'][message.text]
        await message.answer(f"–ê–¥—Ä–µ—Å –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥–æ—Ä–æ–¥–µ {message.text}:\n{info}", reply_markup=main_menu_kb)
        await state.clear()
    elif message.text == "üîô–ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")

async def main():
    logging.basicConfig(level=logging.INFO)
    await create_db()
    bot = Bot(token=TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, F.text == "/start")
    dp.message.register(main_menu_handler, F.text, default_state)

    dp.message.register(cmd_check, Command(commands=["check"]))
    dp.message.register(cmd_add_work, Command(commands=["add_work"]))
    dp.message.register(cmd_remove_work, Command(commands=["remove_work"]))
    dp.message.register(cmd_send_announcement, Command(commands=["send_announcement"]))

    dp.message.register(help_city, HelpStates.city)
    dp.message.register(help_page_nav, HelpStates.page)
    dp.message.register(fsm_back_handler, any_state, F.text == "üîô–ù–∞–∑–∞–¥")

    dp.message.register(entry_city_handler, StateFilter("entry_city"))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler, CallbackQueryHandler
import requests
from bs4 import BeautifulSoup
import re
import time

TOKEN = "8046831301:AAFZTumxzU3mmJ-AMr_hciH7p7rWzE671QQ"
API_TIMEOUT = 15  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 15 —Å–µ–∫—É–Ω–¥
API_MAX_RETRIES = 3  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "<b>üìú –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ü–∏—Ç–∞—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ü–∏—Ç–∞—Ç—É, –∏ —è –Ω–∞–π–¥—É –∞–≤—Ç–æ—Ä–∞ –∏ –∫–Ω–∏–≥—É! üìö\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>\"–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ —Å–ª—É—á–∞–µ—Ç—Å—è\"</i>",
        parse_mode="HTML"
    )

def search_google_books(query, timeout=API_TIMEOUT):
    """–ü–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç –≤ Google Books API"""
    url = "https://www.googleapis.com/books/v1/volumes"
    params = {"q": f"\"{query}\""}  # –£–±—Ä–∞–Ω–æ maxResults –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    try:
        response = requests.get(url, params=params, timeout=timeout)
        response.raise_for_status()
        data = response.json()
        results = []
        if "items" in data:
            for item in data["items"]:
                volume_info = item.get("volumeInfo", {})
                results.append({
                    "text": query,
                    "author": volume_info.get("authors", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])[0],
                    "source": volume_info.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                })
        return results
    except Exception:
        return []

def search_wikiquote_ru(query, timeout=API_TIMEOUT):
    """–ü–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç –≤ –í–∏–∫–∏—Ü–∏—Ç–∞—Ç–Ω–∏–∫–µ"""
    search_url = f"https://ru.wikiquote.org/w/index.php?search={query}&title=–°–ª—É–∂–µ–±–Ω–∞—è:–ü–æ–∏—Å–∫&fulltext=1&ns0=1"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(search_url, headers=headers, timeout=timeout)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        search_results = soup.select('.mw-search-result-heading a')
        if not search_results:
            return []
        page_url = "https://ru.wikiquote.org" + search_results[0]['href']
        page_response = requests.get(page_url, headers=headers, timeout=timeout)
        page_response.raise_for_status()
        soup = BeautifulSoup(page_response.text, 'html.parser')
        quotes = soup.select('.mw-parser-output > ul > li, .mw-parser-output > dl > dd')
        results = []
        author = search_results[0].text
        for quote in quotes:
            results.append({
                "text": quote.text.strip(),
                "author": author,
                "source": "–í–∏–∫–∏—Ü–∏—Ç–∞—Ç–Ω–∏–∫"
            })
        return results
    except Exception:
        return []

def search_quotes(query):
    """–ü–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç —á–µ—Ä–µ–∑ API –∏ –í–∏–∫–∏—Ü–∏—Ç–∞—Ç–Ω–∏–∫"""
    is_russian = bool(re.search('[–∞-—è–ê-–Ø—ë–Å]', query))
    apis = [search_google_books, search_wikiquote_ru] if is_russian else [search_google_books]
    all_results = []

    for api_func in apis:
        for attempt in range(API_MAX_RETRIES):
            try:
                timeout = API_TIMEOUT + (attempt * 5)  # 15—Å, 20—Å, 25—Å
                results = api_func(query, timeout=timeout)
                if results:
                    all_results.extend(results)
                break
            except Exception:
                if attempt < API_MAX_RETRIES - 1:
                    time.sleep(2)

    return all_results

def create_result_message(result, index, total):
    """–°–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–æ–º–µ—Ä–∞ –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    return (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç {index + 1} –∏–∑ {total}</b>\n"
        f"<b>–¶–∏—Ç–∞—Ç–∞:</b> <i>\"{result['text']}\"</i>\n"
        f"<b>–ê–≤—Ç–æ—Ä:</b> {result['author']}\n"
        f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {result['source']}"
    )

def create_keyboard(index, total):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ù–∞–∑–∞–¥' –∏ '–í–ø–µ—Ä—ë–¥'"""
    buttons = []
    if index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{index}"))
    if index < total - 1:
        buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"next_{index}"))
    return InlineKeyboardMarkup([buttons]) if buttons else None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.message.text.strip()
        
        # –§–∏–ª—å—Ç—Ä –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if "–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Ü–∏—Ç–∞—Ç—ã" in query:
            await update.message.reply_text(
                "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>\n–ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑ –ª–æ–≥–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é —Ü–∏—Ç–∞—Ç—É.",
                parse_mode="HTML"
            )
            return
        
        if len(query) < 3:
            await update.message.reply_text(
                "<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>\n–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.",
                parse_mode="HTML"
            )
            return
        
        await update.message.reply_text(
            "<i>üîç –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ü–∏—Ç–∞—Ç—ã...</i>",
            parse_mode="HTML"
        )
        
        results = search_quotes(query)
        if not results:
            await update.message.reply_text(
                "<b>üòî –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —Ü–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ñ—Ä–∞–∑—É –∏–ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>\"–°–º—ã—Å–ª –∂–∏–∑–Ω–∏\"</i>",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ
        context.user_data['results'] = results
        context.user_data['current_index'] = 0
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        message = create_result_message(results[0], 0, len(results))
        keyboard = create_keyboard(0, len(results))
        await update.message.reply_text(message, parse_mode="HTML", reply_markup=keyboard)
    
    except Exception as e:
        await update.message.reply_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∏ '–í–ø–µ—Ä—ë–¥'"""
    query = update.callback_query
    await query.answer()
    
    results = context.user_data.get('results', [])
    if not results:
        await query.message.reply_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.",
            parse_mode="HTML"
        )
        return
    
    current_index = context.user_data.get('current_index', 0)
    callback_data = query.data
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    if callback_data.startswith("prev_"):
        current_index -= 1
    elif callback_data.startswith("next_"):
        current_index += 1
    
    context.user_data['current_index'] = current_index
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = create_result_message(results[current_index], current_index, len(results))
    keyboard = create_keyboard(current_index, len(results))
    await query.message.edit_text(message, parse_mode="HTML", reply_markup=keyboard)

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(CallbackQueryHandler(handle_callback))

app.run_polling()
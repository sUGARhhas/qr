import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ContentType, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from io import BytesIO
from aiohttp import MultipartWriter
import ssl
from PIL import Image
import io
import time

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '7363048352:AAFyJ2IFnj_SMMR9Xd2sOOzIiEiRu9mkqtQ'

# –ö–ª—é—á API SauceNao
SAUCENAO_API_KEY = '643c9778727fabe66a1098b49808ab6efc5c8cbe'

# URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ SauceNao
SAUCENAO_API_URL = 'https://saucenao.com/search.php'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞—ë–º SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

async def send_search_links(message: Message, file_url: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞ –≤ Google –∏ –Ø–Ω–¥–µ–∫—Å\n\n–ù–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ø–Ω–¥–µ–∫—Å –±—Ä–∞—É–∑–µ—Ä–µ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å –≤ Google", 
                               url=f"https://www.google.com/searchbyimage?image_url={file_url}&client=app"),
            InlineKeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å", 
                               url=f"https://yandex.com/images/search?url={file_url}&rpt=imageview")
        ]
    ])
    await message.answer(
        "ü§î –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ—á–µ–Ω—å —Ç–æ—á–Ω—ã–π. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Google –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def send_welcome(message: Message):
    welcome_text = (
        "üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Anime Finder Bot!* üå∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –∞–Ω–∏–º–µ, –∏ —è –Ω–∞–π–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–µ—Ä–∏—é, –≤—Ä–µ–º—è –∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üé¨\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.\n"
        "–ü–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∏—Ä –∞–Ω–∏–º–µ! ‚ú®"
    )
    await message.answer(welcome_text, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def send_help(message: Message):
    help_text = (
        "üìñ *–ü–æ–º–æ—â—å –ø–æ Anime Finder Bot* üìñ\n\n"
        "üîπ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –∞–Ω–∏–º–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–µ—Ä–∏—è, –≤—Ä–µ–º—è).\n"
        "üîπ –ö–æ–º–∞–Ω–¥—ã:\n"
        "  /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "  /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ!"
    )
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)

async def search_saucenao(image_data: bytes):
    params = {
        'api_key': SAUCENAO_API_KEY,
        'output_type': 2,  # JSON-—Ñ–æ—Ä–º–∞—Ç
        'numres': 1,  # –û–¥–∏–Ω –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    }
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as session:
        try:
            with MultipartWriter('form-data') as mp:
                part = mp.append(image_data, {'Content-Type': 'image/jpeg'})
                part.set_content_disposition('form-data', name='file', filename='image.jpg')
                async with session.post(SAUCENAO_API_URL, params=params, data=mp) as response:
                    if response.status != 200:
                        return None
                    data = await response.json()
                    return data
        except Exception:
            return None

async def convert_to_supported_format(image_data: bytes) -> bytes:
    try:
        with Image.open(io.BytesIO(image_data)) as img:
            if img.format.lower() not in ['jpeg', 'jpg', 'png', 'bmp', 'webp']:
                output = io.BytesIO()
                img.convert('RGB').save(output, format='JPEG')
                return output.getvalue()
            return image_data
    except Exception:
        raise

@dp.message(lambda message: message.content_type == ContentType.PHOTO)
async def handle_photo(message: Message):
    try:
        photo = message.photo[-1]  # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        file_info = await bot.get_file(photo.file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"

        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as session:
            async with session.get(file_url) as response:
                if response.status != 200:
                    await send_search_links(message, file_url)
                    return
                image_data = await response.read()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        try:
            image_data = await convert_to_supported_format(image_data)
        except Exception:
            await send_search_links(message, file_url)
            return

        result = await search_saucenao(image_data)
        if not result or 'results' not in result or not result['results']:
            await send_search_links(message, file_url)
            return

        best_result = result['results'][0]
        header = best_result['header']
        data = best_result['data']
        similarity = float(header.get('similarity', 0))

        if similarity < 70:
            await send_search_links(message, file_url)
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–Ω–∏–º–µ
        title = data.get('source', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        episode = data.get('part', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        timestamp = data.get('est_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        source_url = data.get('ext_urls', ['–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'])[0]

        response_text = (
            "üéâ *–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω!* üéâ\n\n"
            f"üì∫ *–ù–∞–∑–≤–∞–Ω–∏–µ*: {title}\n"
            f"üìº *–°–µ—Ä–∏—è*: {episode}\n"
            f"‚è∞ *–í—Ä–µ–º—è*: {timestamp}\n"
            f"üìä *–°—Ö–æ–¥—Å—Ç–≤–æ*: {similarity:.2f}%\n\n"
            "üí° –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? –û—Ç–ø—Ä–∞–≤—å –µ—â—ë –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"
        )

        await message.answer(response_text, parse_mode=ParseMode.MARKDOWN)

    except Exception:
        try:
            file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{message.photo[-1].file_id}"
            await send_search_links(message, file_url)
        except Exception:
            await message.answer("ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: Message):
    await message.answer(
        "ü§∑‚Äç‚ôÇÔ∏è –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã /start, /help. –û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∞–Ω–∏–º–µ!",
        parse_mode=ParseMode.MARKDOWN
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    start_time = time.time()
    await dp.start_polling(bot)
    end_time = time.time()

if __name__ == '__main__':
    asyncio.run(main())
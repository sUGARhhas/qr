from aiogram import Router, F, types, Bot
from aiogram.filters import CommandStart, Command
from create_bot import bot
from keyboards import start_client_kb, settings_client_kb, category_client_kb
from data_base import sqlite_db
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from functools import partial

router = Router()

scheduler = AsyncIOScheduler()

async def cmd_learn_word(user_id: int, bot_instance: Bot):
    user_category = sqlite_db.get_user_category(user_id)
    word_data = sqlite_db.get_next_word(user_category)
    if word_data:
        word, transcription, description, example = word_data
        await bot_instance.send_message(user_id, f'üé≤ | –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ: *{word}*\n'
                                        f'\nüõ† | –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: \\[{transcription}\\]\n'
                                        f'\nüíé | –ü–µ—Ä–µ–≤–æ–¥: \n{description}\n'
                                        f'\nüìú | –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: \n\n{example}\n'
                                        f'\n*üî• –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è!*',
                               parse_mode='Markdown')

        sqlite_db.increase_category_count(user_id, user_category)

    else:
        await bot_instance.send_message(user_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É—á–µ–±—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')

async def scheduled_learn_word(user_id: int, bot_instance: Bot):
    await cmd_learn_word(user_id, bot_instance)

def start_scheduler(user_id: int, bot_instance: Bot):
    job_id = f'learn_word_job_{user_id}'

    if not scheduler.get_job(job_id):
        if not scheduler.running:
            scheduler.add_job(
                partial(scheduled_learn_word, user_id, bot_instance),
                IntervalTrigger(hours=1),
                id=job_id,
                name=f'–ó–∞–ø—É—Å–∫ cmd_learn_word –∫–∞–∂–¥—ã–µ 1 —á–∞—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}',
                replace_existing=True,
            )
            scheduler.start()
        else:
            scheduler.add_job(
                partial(scheduled_learn_word, user_id, bot_instance),
                IntervalTrigger(hours=1),
                id=job_id,
                name=f'–ó–∞–ø—É—Å–∫ cmd_learn_word –∫–∞–∂–¥—ã–µ 1 —á–∞—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}',
                replace_existing=True,
            )


@router.message(CommandStart())
async def cmd_start(message : types.Message):
    await bot.send_message(message.from_user.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{message.from_user.first_name}*, '
                                                 '–≤ EnglishBot –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.'
                                                 '\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–∞–π –í–∞–º–∏ '
                                                 '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n'
                                                 '\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–π–¥–∏—Ç–µ –≤ *‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n',
                           parse_mode='Markdown', reply_markup=start_client_kb)

    username = message.from_user.username
    ud = message.from_user.id
    sqlite_db.add_user(username, ud)
    start_scheduler(message.from_user.id, bot)

@router.message(F.text == 'üé≤ –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ')
async def cmd_word(message: types.Message):
    user_category = sqlite_db.get_user_category(message.from_user.id)
    word_data = sqlite_db.get_next_word(user_category)
    if word_data:
        word, transcription, description, example = word_data
        await bot.send_message(message.from_user.id, f'üé≤ | –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ: *{word}*\n'
                                        f'\nüõ† | –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: \\[{transcription}\\]\n'
                                        f'\nüíé | –ü–µ—Ä–µ–≤–æ–¥: \n{description}\n'
                                        f'\nüìú | –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: \n\n{example}\n'
                                        f'\n*üî• –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è!*',
                               parse_mode='Markdown')

        sqlite_db.increase_category_count(message.from_user.id, user_category)

    else:
        await bot.send_message(message.from_user.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É—á–µ–±—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')

@router.message(Command(commands=['hidekb']))
async def cmd_hide_kb(message : types.Message):
    await bot.send_message(message.from_user.id, '–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */start*',
                           parse_mode='Markdown',
                           reply_markup=types.ReplyKeyboardRemove())

@router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def cmd_setting(message : types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª *‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏*', parse_mode='Markdown',
                           reply_markup=settings_client_kb)

@router.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥')
async def cmd_back(message : types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', parse_mode='Markdown',
                           reply_markup=start_client_kb)

@router.message(F.text == '‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª–æ–≤')
async def cmd_category(message : types.Message):
    await bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã—É—á–∏—Ç—å.',
                           reply_markup=category_client_kb)

@router.message(F.text == 'üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ')
async def cmd_category_1(message: types.Message):
    new_category = 'category_1'
    ud = message.from_user.id
    sqlite_db.update_user_category(ud, new_category)

    await bot.send_message(message.from_user.id, f'{message.from_user.first_name}, '
                                                 '–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ*',
                           parse_mode='Markdown')

@router.message(F.text == 'üóΩ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏ –æ–±—â–µ—Å—Ç–≤–æ')
async def cmd_category_2(message: types.Message):
    new_category = 'category_2'
    ud = message.from_user.id
    sqlite_db.update_user_category(ud, new_category)

    await bot.send_message(message.from_user.id, f'{message.from_user.first_name}, '
                                                 '–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *üóΩ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏ –æ–±—â–µ—Å—Ç–≤–æ*',
                           parse_mode='Markdown')

@router.message(F.text == 'üèØ –î–æ–º')
async def cmd_category_3(message: types.Message):
    new_category = 'category_3'
    ud = message.from_user.id
    sqlite_db.update_user_category(ud, new_category)

    await bot.send_message(message.from_user.id, f'{message.from_user.first_name}, '
                                                 '–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *üèØ –î–æ–º*', parse_mode='Markdown')
